#!/usr/bin/env bash
#

usage () { 
    echo "Usage: masscan.sh [port specification] [OPTIONS] -o <output base name> -r <scanning rate> -t <target specification> [-p|-l <port specification>]"
    echo "Required Arguments:"
    echo "  -o:     base names for output files"
    echo "  -r:     scanning rate (packets per second)"
    echo "  -t:     target specification can be either a file, a network with subnet mask, or a"
    echo "          single IP address"
    echo ""
    echo "Optional Arguments:"
    echo "  -a:     perform false positive checks automatically"
    echo "  -d:     duration to run the scan, the duration has to be in the format:"
    echo "          <floating-point number><s|m|h|d>"
    echo "          where s is seconds (and default if no suffix provided), m is minutes, h is hours, d is days "
    echo "  -e:     don't scan, just echo the masscan command that would be run"
    echo "  -i:     interface name"
    echo "  -m:     router MAC address"
    echo "  -s:     resume a scan using the local paused.conf file"
    echo "  -u:     perform a UDP scan as well as a TCP scan"
    echo "  -x:     file containing systems to exclude from scanning"
    echo ""
    echo "Port Specification:"
    echo "  -p <n>  scan the top n ports as determined by nmap, n must be between"
    echo "          1 and 1000 (inclusive), or n must be \"all\"."
    echo "  -l      p1,p2,p3,...pn:	scan the listed ports"
    echo "	if no option is specified, a default list of 158 TCP ports will be scanned."
}

interface=""
router_mac=""
exclude_file=""
duration=""
udp_scan=false
echo_only=false
auto_check=false
resume=false
while getopts "ad:ehul:i:m:o:p:r:st:x:" OPTION; do
    case "$OPTION" in
        a ) auto_check=true;;
        d ) duration="$OPTARG";;
        e ) echo_only=true;;
        h ) usage; exit;;
        u ) udp_scan=true;;
        l ) port_list="$OPTARG";;
        i ) interface="$OPTARG";;
        m ) router_mac="$OPTARG";;
        o ) outputbase="$OPTARG";;
        p ) num_ports="$OPTARG";;
        r ) rate="$OPTARG";;
        s ) resume=true;;
        t ) targets="$OPTARG";;
        x ) exclude_file="$OPTARG";;
        \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        : ) echo "Missing argument for -$OPTARG" >&2; exit 1;;
        * ) echo "Invalid option provided: -$OPTARG" >&2; exit 1;;
    esac
done

# check for paused.conf in local directory, if it exists
# and resume is false, exit
if [ -f "paused.conf" ] && [ "$resume" = false ]; then
    echo "[-] local paused.conf file found and resume option is not set"
    echo "[-] either set resume option or delete the paused.conf file"
    usage
    exit 1
fi

# check for resume set but paused.conf is missing
if [ "$resume" = true ] && [ ! -f "paused.conf" ]; then
    echo "[-] resume option is set but paused.conf does not exist"
    usage
    exit 1
fi

# test required arguments
if [ ! "$rate" ] || [ ! "$targets" ] || [ ! "$outputbase" ]; then
    echo "Missing required arguments"
    usage
    exit 1
fi

# test if necessary scripts for auto-check are in the local directory
if [ "$auto_check" = true ]; then
    if [ ! -f "scan_host_list.py" ]; then
        echo "[-] scan_host_list.py is missing"
        exit 1
    fi
    if [ ! -f "probe_services.sh" ]; then
        echo "[-] probe_services.sh is missing"
        exit 1
    fi
fi

# set the target list - either a network and subnet mask or file
if [ -f "$targets" ]; 
then
    target_specification="-iL $targets"
    target_list=`cat $targets`
elif [[ "$targets" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]] || [[ "$targets" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
then
    target_specification="$targets"
    target_list="$targets"
fi

# set the port list for scanning
tcp_default_portlist="1,3,7,9,13,17,19,21-23,25-26,37,53,79-82,88,100,106,110,111,113,119,135,139,143-144,179,199,254,255,280,311,389,\
427,443-445,464,465,497,513-515,543,544,548,554,587,593,625,631,636,646,787,808,873,902-903,993,995,999,1000,1022,\
1024-1033,1035-1041,1044,1048-1050,1053,1054,1056,1058,1059,1064-1066,1069,1071,1074,1080,1110,1234,1433,1494,1521,\
1720,1723,1755,1761,1801,1900,1935,1993,1998,2000-2002,2005,2049,2103,2105,2107,2121,2161,2301,2383,2401,2601,2717,\
2869,2967,3000,3001,3128,3268,3306,3389,3689,3690,3703,3986,4000,4001,4045,4443,4505,4506,4899,5000,5001,5003,5009,5050,5051,5060,\
5101,5120,5190,5357,5432,5555,5556,5631,5666,5800,5900,5901,5985,6000-6002,6004,6112,6646,7000-7002,7070-7071,7937,7938,8000-8002,\
8008-8010,8031,8080,8081,8443,8888,9000,9001,9090,9100,9102,9999,10000,10010,32768,32771,49152-49157,50000"
udp_default_portlist="53,67-69,123,135,137-139,161,500,514,520,623,631,1434"
# these top port lists are obtained from the nmap port scanner
# the file containing this service list (in Linux) is /usr/share/nmap/nmap-services
# the lists below can be recreated with the following command:
# cat nmap-services | grep -v '^#.*$' | sort -k3 -r | grep '/tcp' | awk '{print $2}' | cut -d "/" -f 1 | head -n100 | tr '\n' ' '
# cat nmap-services | grep -v '^#.*$' | sort -k3 -r | grep '/udp' | awk '{print $2}' | cut -d "/" -f 1 | head -n100 | tr '\n' ' '
tcp_top_portlist=( 80 23 443 21 22 25 3389 110 445 139 143 53 135 3306 8080 1723 111 995 993 5900 1025 587 8888 199 \
    1720 465 548 113 81 6001 10000 514 5060 179 1026 2000 8443 8000 32768 554 26 1433 49152 2001 515 8008 49154 1027 \
    5666 646 5000 5631 631 49153 8081 2049 88 79 5800 106 2121 1110 49155 6000 513 990 5357 427 49156 543 544 5101 144 \
    7 389 8009 3128 444 9999 5009 7070 5190 3000 5432 1900 3986 13 1029 9 5051 6646 49157 1028 873 1755 2717 4899 9100 \
    119 37 1000 3001 5001 82 10010 1030 9090 2107 1024 2103 6004 1801 5050 19 8031 1041 255 2967 1049 1048 1053 3703 \
    1056 1065 1064 1054 17 808 3689 1031 1044 1071 5901 9102 100 8010 2869 1039 5120 4001 9000 2105 636 1038 2601 7000 \
    1 1066 1069 625 311 280 254 4000 5003 1761 2002 2005 1998 1032 1050 6112 3690 1521 2161 6002 1080 2401 4045 902 7937 \
    787 1058 2383 32771 1033 1040 1059 50000 5555 10001 1494 2301 593 3 3268 7938 1234 1022 1035 9001 1074 8002 1036 1037 \
    464 1935 6666 2003 497 6543 1352 24 3269 1111 407 500 20 2006 3260 1034 15000 1218 4444 264 2004 33 1042 42510 999 \
    3052 1023 1068 222 888 7100 563 1717 2008 992 32770 32772 7001 8082 2007 5550 2009 1043 512 5801 7019 2701 50001 \
    1700 4662 2065 2010 42 9535 2602 3333 161 5100 2604 4002 5002 8192 6789 8194 6059 1047 8193 2702 9595 1051 9594 9593 \
    16993 16992 5226 5225 32769 1052 1055 3283 1062 9415 8701 8652 8651 8089 65389 65000 64680 64623 55600 55555 52869 \
    35500 33354 23502 20828 1311 1060 4443 730 731 709 1067 13782 5902 366 9050 1002 85 5500 1864 5431 1863 8085 51103 \
    49999 45100 10243 49 6667 90 27000 1503 6881 8021 1500 340 5566 8088 2222 9071 8899 1501 5102 32774 32773 9101 6005 \
    9876 5679 163 648 146 1666 901 83 9207 8001 8083 8084 5004 3476 5214 14238 12345 912 30 2605 2030 6 541 8007 3005 4 \
    1248 2500 880 306 4242 1097 9009 2525 1086 1088 8291 52822 6101 900 7200 2809 800 32775 12000 1083 211 987 705 20005 \
    711 13783 6969 3071 3801 3017 8873 5269 5222 1046 1085 5987 5989 5988 2190 11967 8600 8087 30000 9010 7741 3367 3766 \
    7627 14000 3031 1099 1098 6580 2718 15002 4129 6901 3827 3580 2144 8181 9900 1718 9080 2135 2811 1045 2399 1148 10002 \
    9002 8086 3998 2607 11110 4126 2875 5718 9011 5911 5910 9618 2381 1096 3300 3351 1073 8333 15660 6123 3784 5633 3211 \
    1078 3659 3551 2100 16001 3325 3323 2260 2160 1104 9968 9503 9502 9485 9290 9220 8994 8649 8222 7911 7625 7106 65129 \
    63331 6156 6129 60020 5962 5961 5960 5959 5925 5877 5825 5810 58080 57294 50800 50006 50003 49160 49159 49158 48080 \
    40193 34573 34572 34571 3404 33899 3301 32782 32781 31038 30718 28201 27715 25734 24800 22939 21571 20221 20031 19842 \
    19801 19101 17988 1783 16018 16016 15003 14442 13456 10629 10628 10626 10621 10617 10616 10566 10025 10024 10012 1169 \
    5030 5414 1057 6788 1947 1094 1075 1108 4003 1081 1093 4449 1687 1840 1100 1063 1061 1107 1106 9500 20222 7778 1077 \
    1310 2119 2492 1070 20000 8400 1272 6389 7777 1072 1079 1082 8402 691 89 32776 1999 1001 212 2020 7002 2998 6003 50002 \
    3372 898 5510 32 2033 5903 99 749 425 43 5405 6106 13722 6502 7007 458 1580 9666 8100 3737 5298 1152 8090 2191 3011 \
    9877 5200 3851 3371 3370 3369 7402 5054 3918 3077 7443 3493 3828 1186 2179 1183 19315 19283 5963 3995 1124 8500 1089 \
    10004 2251 1087 5280 3871 3030 62078 9091 4111 1334 3261 2522 5859 1247 9944 9943 9110 8654 8254 8180 8011 7512 7435 \
    7103 61900 61532 5922 5915 5904 5822 56738 55055 51493 50636 50389 49175 49165 49163 3546 32784 27355 27353 27352 24444 \
    19780 18988 16012 15742 10778 4006 2126 4446 3880 1782 1296 9998 32777 9040 32779 1021 2021 666 32778 616 700 1524 1112 \
    5802 4321 545 49400 84 38292 2040 3006 2111 32780 1084 1600 2048 2638 9111 6699 6547 16080 2106 667 6007 1533 5560 1443 \
    720 2034 555 801 3826 3814 7676 3869 1138 6567 10003 3221 6025 2608 9200 7025 11111 4279 3527 1151 8300 6689 9878 8200 \
    10009 8800 5730 2394 2393 2725 5061 6566 9081 5678 3800 4550 5080 1201 3168 1862 1114 3905 6510 8383 3914 3971 3809 5033 \
    3517 4900 9418 2909 3878 8042 1091 1090 3920 3945 1175 3390 3889 1131 8292 1119 5087 7800 4848 16000 3324 3322 1117 5221 \
    4445 9917 9575 9099 9003 8290 8099 8093 8045 7921 7920 7496 6839 6792 6779 6692 6565 60443 5952 5950 5907 5906 5862 5850 \
    5815 5811 57797 56737 5544 55056 5440 54328 54045 52848 52673 50500 50300 49176 49167 49161 44501 44176 41511 40911 32785 \
    32783 30951 27356 26214 25735 19350 18101 18040 17877 16113 15004 14441 12265 12174 10215 10180 4567 6100 4004 4005 8022 \
    9898 7999 1271 1199 3003 1122 2323 2022 4224 617 777 417 714 6346 981 722 1009 4998 70 1076 5999 10082 765 301 524 668 \
    2041 259 1984 2068 6009 1417 1434 44443 7004 1007 4343 416 2038 4125 1461 9103 6006 109 911 726 1010 2046 2035 7201 687 \
    2013 481 903 125 6669 6668 1455 683 1011 2043 2047 256 31337 9929 5998 406 44442 783 843 2042 2045 1875 1556 5938 8675 \
    1277 3972 3968 3870 6068 3050 5151 3792 8889 5063 1198 1192 4040 1145 6060 6051 3916 7272 9443 9444 7024 13724 4252 4200 \
    1141 1233 8765 3963 1137 9191 3808 8686 3981 9988 1163 4164 3820 6481 3731 40000 2710 3852 3849 3853 5081 8097 3944 1287 \
    3863 4555 4430 7744 1812 7913 1166 1164 1165 10160 8019 4658 7878 1259 1092 )
udp_top_portlist=( 631 161 137 123 138 1434 445 135 67 53 139 500 68 520 1900 4500 514 49152 162 69 5353 111 49154 1701 \
    998 996 997 999 3283 49153 1812 136 2222 2049 32768 5060 1025 1433 3456 80 20031 1026 7 1646 1645 593 518 2048 626 \
    1027 177 1719 427 497 4444 1023 65024 19 9 49193 1029 49 88 1028 17185 1718 49186 2000 31337 49201 49192 515 2223 \
    443 49181 1813 120 158 49200 3703 32815 17 5000 32771 33281 1030 1022 623 32769 5632 10000 49194 49191 49182 49156 \
    9200 30718 49211 49190 49188 49185 5001 5355 32770 37444 34861 34555 1032 4045 3130 1031 49196 49158 37 2967 4000 \
    989 3659 4672 34862 23 49195 49189 49187 49162 2148 41524 10080 32772 407 42 33354 1034 49199 49180 3389 1001 6346 \
    21 13 517 1068 990 1045 1041 1782 6001 19283 49210 49209 49208 49205 49202 49184 49179 49171 9876 39213 800 389 464 \
    1039 1036 1038 1419 192 199 44968 1008 49166 49159 1033 1024 22986 19682 22 2002 1021 11487 664 58002 49172 49168 \
    49165 49163 1043 1885 1049 5093 1044 3052 7938 1019 5351 683 6000 5500 27892 16680 32773 41058 35777 113 52225 \
    49174 49169 49160 1056 1047 8193 685 1886 686 6004 38293 782 786 38037 32774 780 1080 32775 682 2051 1054 9950 983 \
    6971 6970 1014 1066 5050 781 31891 31681 31073 30365 30303 29823 28547 27195 25375 22996 22846 21383 20389 20126 \
    20019 19616 19503 19120 18449 16947 16832 42172 33355 32779 53571 52503 49215 49213 49212 49204 49198 49175 49167 \
    5002 27015 5003 7000 513 1485 1048 1065 1090 684 9103 1037 1761 32777 539 767 434 54321 3401 112 512 6347 1000 363 \
    47624 42508 45441 41370 41081 40915 40732 40708 40441 40116 39888 36206 35438 34892 34125 33744 32931 32818 38 776 \
    32776 64513 63555 62287 61370 58640 58631 56141 54281 51717 50612 49503 49207 49197 49176 49173 49170 49161 49157 \
    217 1012 775 902 3702 8001 9020 1042 643 829 1040 1035 1064 1901 688 2160 959 9199 8181 1069 687 32528 32385 32345 \
    31731 31625 31365 31195 31189 31109 31059 30975 30704 30697 30656 30544 30263 29977 29810 29256 29243 29078 28973 \
    28840 28641 28543 28493 28465 28369 28122 27899 27707 27482 27473 26966 26872 26720 26415 26407 25931 25709 25546 \
    25541 25462 25337 25280 25240 25157 24910 24854 24644 24606 24594 24511 24279 24007 23980 23965 23781 23679 23608 \
    23557 23531 23354 23176 23040 22914 22799 22739 22695 22692 22341 22055 21902 21803 21621 21354 21298 21261 21212 \
    21131 20359 20004 19933 19687 19600 19489 19332 19322 19294 19197 19165 19130 19039 19017 18980 18835 18582 18360 \
    18331 18234 18004 17989 17939 17888 17616 17615 17573 17459 17455 17091 16918 16430 16402 25003 1346 20 2 32780 \
    1214 772 1993 402 773 31335 774 903 2343 8000 6050 1046 3664 1057 1053 1081 1100 1234 1124 1105 9001 1804 9000 1050 \
    9877 965 838 814 8010 1007 1060 1055 6002 1524 1059 5555 5010 32778 27444 47808 48761 48489 48455 48255 48189 48078 \
    47981 47915 47772 47765 46836 46532 46093 45928 45818 45722 45685 45380 45247 44946 44923 44508 44334 44253 44190 \
    44185 44179 44160 44101 43967 43824 43686 43514 43370 43195 43094 42639 42627 42577 42557 42434 42431 42313 42056 \
    41971 41967 41896 41774 41702 41638 41446 41308 40866 40847 40805 40724 40711 40622 40539 40019 39723 39714 39683 \
    39632 39217 38615 38498 38412 38063 37843 37813 37783 37761 37602 37393 37212 37144 36945 36893 36778 36669 36489 \
    36458 36384 36108 35794 35702 34855 34796 34758 34580 34579 34578 34577 34570 34433 34422 34358 34079 34038 33872 \
    33866 33717 33459 33249 33030 32798 1484 3 1067 64727 64590 64481 64080 63420 62958 62699 62677 62575 62154 61961 \
    61685 61550 61481 61412 61322 61319 61142 61024 60423 60381 60172 59846 59765 59207 59193 58797 58419 58178 58075 \
    57977 57958 57843 57813 57410 57409 57172 55587 55544 55043 54925 54807 54711 54114 54094 53838 53589 53037 53006 \
    52144 51972 51905 51690 51586 51554 51456 51255 50919 50708 50497 50164 50099 49968 49640 49396 49393 49360 49350 \
    49306 49262 49259 49226 49222 49220 49216 49214 49178 49177 49155 1058 4666 3457 559 1455 4008 207 764 1457 1200 \
    3296 657 1101 689 639 3343 8900 1070 1087 1088 1072 2161 944 9370 826 789 16086 1020 1013 1051 2362 2345 502 24242 \
    21800 21847 30260 19315 19541 21000 27007 27002 17754 20003 17219 18888 32760 32750 32727 32611 32607 32546 32506 \
    32499 32495 32479 32469 32446 32430 32425 32422 32415 32404 32382 32368 32359 32352 32326 32273 32262 32219 32216 \
    32185 32132 32129 32124 32066 32053 32044 31999 31963 31918 31887 31882 31852 31803 31794 31792 31783 31750 31743 \
    31735 31732 31720 31692 31673 31609 31602 31599 31584 31569 31560 31521 31520 31481 31428 31412 31404 31361 31352 \
    31350 31343 31334 31284 31267 31266 31261 31202 31199 31180 31162 31155 31137 31134 31133 31115 31112 31084 31082 \
    31051 31049 31036 31034 30996 30943 30932 30930 30909 30880 30875 30869 30856 30824 30803 30789 30785 30757 30698 \
    30669 30661 30622 30612 30583 30578 30533 30526 30512 30477 30474 30473 30465 30461 30348 30299 30256 30214 30209 \
    30154 30134 30093 30085 30067 30055 30034 29981 29964 29961 29894 29886 29843 29834 29794 29709 29613 29595 29581 \
    29564 29554 29541 29534 29522 29503 29461 29453 29449 29444 29426 29410 29401 29400 29357 29333 29319 29276 29230 \
    29200 29180 29168 29162 29153 29150 29142 29135 29129 29082 29054 29048 29030 28995 28965 28944 28933 28931 28892 \
    28815 28808 28803 28746 28745 28725 28719 28707 28706 28692 28674 28664 28663 28645 28640 28630 28609 28584 28525 \
    28485 28476 28445 28440 28438 28387 28349 28344 28295 28263 28247 28222 28220 28211 28190 28172 28129 28107 28105 \
    28098 28091 28080 28071 28070 28034 28011 27973 27969 27949 27919 27895 27861 27853 27750 27722 27718 27711 27708 \
    27696 27682 27678 27673 27666 27606 27600 27579 27573 27561 27547 27538 27487 27466 27437 27416 27414 27287 27272 \
    27271 27263 27209 )

if [ ! "$num_ports" ] && [ ! "$port_list" ]
then
    tcp_portlist=$tcp_default_portlist
    udp_portlist=$udp_default_portlist
elif [ "$num_ports" ]
then
    if [[ "$num_ports" == "all" ]]
    then
        tcp_portlist="1-65535"
        udp_portlist="1-65535"
    elif [ "$num_ports" -ge 1 -a "$num_ports" -le 1000 ]
    then
        # construct the port lists
        tcp_portlist=""
        udp_portlist=""
        let end_range=num_ports-1
        for i in $(seq 0 $end_range); do
            tcp_portlist+="${tcp_top_portlist[$i]}"
            udp_portlist+="U:${udp_top_portlist[$i]}"
            if [[ "$i" -lt "$end_range" ]]; then
                tcp_portlist+=","
                udp_portlist+=","
            fi
        done
    else
        echo "Number of ports must be between 1 and 1000, or \"all\""
        exit 1
    fi
elif [ "$port_list" ]
then
    tcp_portlist="$port_list"
    udp_portlist="$port_list"
fi
echo "TCP PORT LIST = $tcp_portlist"

# check if UDP scan option is set
if [ "$udp_scan" = true ]; then
    echo "UDP PORT LIST = $udp_portlist"
    udp_portlist_formatted=$(echo "$udp_portlist" | sed 's/^/U:/; s/,/,U:/g')
    port_argument="$udp_portlist_formatted,$tcp_portlist"
else
    udp_option=""
    port_argument="$tcp_portlist"
fi

# check if adapter_ip is set
if [ ${#interface} -gt 0 ]; then
    adapter_option="--adapter ${interface}"
else
    adapter_option=""
fi

# check if router_mac is set
if [ ${#router_mac} -gt 0 ]; then
    router_option="--router-mac ${router_mac}"
else
    router_option=""
fi

# check if exclude_file option is set
if [ ${#exclude_file} -gt 0 ]; then
    exclude_option="--excludefile $exclude_file"
else
    exclude_option=""
fi

# check if duration is set
if [ ${#duration} -gt 0 ]; then
    echo "[*] running scan for $duration"
    command_prefix="timeout -s SIGINT $duration"
else
    command_prefix=""
fi

# build final command
if [ "$resume" = false ]; then
    masscan_cmd="$command_prefix masscan $target_specification $exclude_option --ping $adapter_option $router_option -p$port_argument --rate $rate -oL $outputbase.masscan"
else
    echo "[*] Resuming from paused.conf"
    masscan_cmd="$command_prefix masscan --resume paused.conf"
fi

if [ "$echo_only" = true ]; then
    echo "Command to be run:"
    echo "$masscan_cmd"
    exit 0
fi

# start or append to log file
logfile=$outputbase"_log.txt"
if [ "$resume" = true ]; then
    echo "RESUMING SCAN" >> "${logfile}"
else
    echo "STARTING SCAN" > "${logfile}"
fi
echo "============ifconfig===============" >> "${logfile}"
ifconfig >> "${logfile}"
echo "============/etc/resolv.conf===============" >> "${logfile}"
cat /etc/resolv.conf >> "${logfile}"
echo "============netstat -rn===============" >> "${logfile}"
netstat -rn >> "${logfile}"
echo "============date===============" >> "${logfile}"
date >> "${logfile}"
echo "============masscan command===============" >> "${logfile}"
echo "$masscan_cmd" >> "${logfile}"
echo "============targets===============" >> "${logfile}"
echo "$target_list" >> "${logfile}"
echo "============masscan output===============" >> "${logfile}"

timestamp=`date`
echo "STARTING MASSCAN - $timestamp" >> "${logfile}"
$masscan_cmd | tee -a "${logfile}"

timestamp=`date`
echo "MASSCAN FINISHED - $timestamp" >> "${logfile}"

# perform service checks automatically if specified
if [ "$auto_check" = true ]; then
    python3 scan_host_list.py "$outputbase.masscan" "$outputbase"
    if [ $? -ne 0 ]; then
        echo "[-] scan_host_list.py job failed"
        exit 1
    fi
    ./probe_services.sh "$outputbase" 10 "$rate"
fi

exit 0